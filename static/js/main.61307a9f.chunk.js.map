{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.componet.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAAC,GAAK,OAErB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,mCAAOL,EAAMG,QAAQG,QACrB,4BAAIN,EAAMG,QAAQI,YCHbC,EAAW,SAACR,GAErB,OACI,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLlBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACzB,uBAAQZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCHG,E,kDAxCb,aAAc,IAAD,8BACX,gBAiBJH,aAAc,SAACI,GAEb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjBnC,EAAKC,MAAQ,CACXb,SAAS,GACTU,YAAY,IALH,E,qDAYf,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAQvC,WAGE,MAAiCC,KAAKN,MAA/Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAAIA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBACpG,OACA,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,iBACZC,aAAce,KAAKf,eAE9B,cAAC,EAAD,CAAUJ,SAAUoB,W,GApCRI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.61307a9f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\n\r\nexport const Card = props =>(\r\n\r\n    <div className=\"card-container\"> \r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n        <h2> { props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n\r\n)\r\n\r\n","import React from \"react\";\r\nimport './card-list.style.css'\r\nimport '../card/card.component'\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = (props) =>\r\n{\r\n    return(\r\n        <div className='card-list'>\r\n        {\r\n            props.monsters.map(monster => \r\n            <Card key={monster.id} monster={monster}>\r\n               \r\n            </Card>)\r\n        }\r\n        </div>\r\n    )\r\n}","import {React  } from \"react\";\r\nimport './search-box.style.css';\r\n\r\n\r\n//functional component, dont have access to state , or lifecycle methods, smaller \r\n\r\nexport const SearchBox = ({placeholder,handleChange}) =>(\r\n<input  className='search'\r\n        type='search' \r\n        placeholder={placeholder}\r\n        onChange={handleChange}>\r\n        </input>\r\n)","import './App.css';\nimport React, {Component} from 'react'\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.componet'\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.state = {\n      monsters:[ ],\n      searchField:''\n    };\n    //this is used to bind the this to the actual context\n   /// this.handleChange = this.handleChange.bind(this); the other option is to use arrow function\n  }\n\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json()) //convert value to json\n  .then(users => this.setState({monsters:users}));\n}\n\nhandleChange= (e) => {\n  //set the context first\n  this.setState({searchField: e.target.value})\n}\n\n  render(){\n    //d structuring allow us to do is pull properties off of an object and set htem to c onstants that we put inside\n    //this. reference the context where its been invoked\n    const {monsters,searchField  } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n      <SearchBox placeholder='Search monster'\n                 handleChange={this.handleChange} ></SearchBox>\n\n      <CardList monsters={filteredMonsters}></CardList>\n    </div>);\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}